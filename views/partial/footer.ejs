
    <script>
        document.addEventListener('DOMContentLoaded', function() {
    // Navbar toggle functionality
    const toggler = document.querySelector('.navbar-toggler');
    const collapse = document.querySelector('.navbar-collapse');

    if (toggler && collapse) {
        toggler.addEventListener('click', function() {
            const isExpanded = toggler.getAttribute('aria-expanded') === 'true';
            toggler.setAttribute('aria-expanded', !isExpanded);
            collapse.classList.toggle('show');
        });
    }

    // Dropdown functionality - handles ALL dropdowns
    const dropdownToggles = document.querySelectorAll('.dropdown-toggle');
    
    dropdownToggles.forEach(function(dropdownToggle) {
        const dropdownMenu = dropdownToggle.nextElementSibling;
        const dropdown = dropdownToggle.closest('.dropdown');

        if (dropdownToggle && dropdownMenu) {
            dropdownToggle.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                // Close all other dropdowns
                document.querySelectorAll('.dropdown-menu.show').forEach(menu => {
                    if (menu !== dropdownMenu) {
                        menu.classList.remove('show');
                        const otherToggle = menu.previousElementSibling;
                        if (otherToggle) {
                            otherToggle.setAttribute('aria-expanded', 'false');
                        }
                    }
                });
                
                // Toggle current dropdown
                const isExpanded = dropdownToggle.getAttribute('aria-expanded') === 'true';
                dropdownToggle.setAttribute('aria-expanded', !isExpanded);
                dropdownMenu.classList.toggle('show');
            });

            // Prevent dropdown from closing when clicking inside it
            if (dropdownMenu) {
                dropdownMenu.addEventListener('click', function(e) {
                    e.stopPropagation();
                });
            }
        }
    });

    // Close dropdowns when clicking outside
    document.addEventListener('click', function(e) {
        if (!e.target.closest('.dropdown')) {
            document.querySelectorAll('.dropdown-menu.show').forEach(menu => {
                menu.classList.remove('show');
                const toggle = menu.previousElementSibling;
                if (toggle) {
                    toggle.setAttribute('aria-expanded', 'false');
                }
            });
        }
    });

    // Close mobile menu when clicking nav links
    document.querySelectorAll('.nav-link').forEach(link => {
        link.addEventListener('click', function(e) {
            // Don't close if it's a dropdown toggle
            if (!this.classList.contains('dropdown-toggle')) {
                if (window.innerWidth <= 991 && collapse) {
                    collapse.classList.remove('show');
                    if (toggler) {
                        toggler.setAttribute('aria-expanded', 'false');
                    }
                }
            }
        });
    });
});
        // Carousel functionality
        let currentSlide = 0;
        const slides = document.querySelectorAll('.carousel-item');
        const indicators = document.querySelectorAll('.carousel-indicators button');
        const totalSlides = slides.length;

        function showSlide(n) {
            slides[currentSlide].classList.remove('active');
            indicators[currentSlide].classList.remove('active');
            
            currentSlide = (n + totalSlides) % totalSlides;
            
            slides[currentSlide].classList.add('active');
            indicators[currentSlide].classList.add('active');
        }

        function nextSlide() {
            showSlide(currentSlide + 1);
        }

        function prevSlide() {
            showSlide(currentSlide - 1);
        }

        document.querySelector('.carousel-control-next').addEventListener('click', nextSlide);
        document.querySelector('.carousel-control-prev').addEventListener('click', prevSlide);

        indicators.forEach((indicator, index) => {
            indicator.addEventListener('click', () => showSlide(index));
        });

        setInterval(nextSlide, 10000);

        const modal = document.getElementById('rentModal');
        const rentBtn = document.getElementById('rentcar-btn');
        const closeBtn = document.getElementById('closeModal');
        const form = document.getElementById('rentalForm');

        // Open modal when rent button is clicked
        rentBtn.addEventListener('click', function(e) {
            e.preventDefault();
            modal.style.display = 'block';
            document.body.style.overflow = 'hidden'; // Prevent background scrolling
        });

        // Close modal when X is clicked
        closeBtn.addEventListener('click', function() {
            modal.style.display = 'none';
            document.body.style.overflow = 'auto'; // Restore scrolling
        });

        // Close modal when clicking outside of it
        window.addEventListener('click', function(e) {
            if (e.target === modal) {
                modal.style.display = 'none';
                document.body.style.overflow = 'auto';
            }
        });

        // Close modal with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && modal.style.display === 'block') {
                modal.style.display = 'none';
                document.body.style.overflow = 'auto';
            }
        });

        // Handle form submission
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            
            try {
                // Get form data
                const formData = new FormData(form);
                const pickupDate = formData.get('pickupDate');
                const returnDate = formData.get('returnDate');
                const pickupLocation = formData.get('pickupLocation');
                const addons = formData.get('addons');

                // Validation
                if (!pickupDate || !returnDate || !pickupLocation) {
                    alert('Please fill in all required fields!');
                    return;
                }

                if (new Date(pickupDate) >= new Date(returnDate)) {
                    alert('Return date must be after pickup date!');
                    return;
                }

                // Calculate rental days and total cost
                const pickupDateTime = new Date(pickupDate);
                const returnDateTime = new Date(returnDate);
                const days = Math.ceil((returnDateTime - pickupDateTime) / (1000 * 60 * 60 * 24));
                const baseTotal = days * 15000;

                // Add-on costs
                let addonCost = 0;
                let addonText = 'None';
                
                if (addons) {
                    addonText = addons;
                    switch(addons) {
                        case 'GPS':
                            addonCost = days * 500;
                            break;
                        case 'Child Seat':
                            addonCost = days * 300;
                            break;
                        case 'Driver':
                            addonCost = days * 2000;
                            break;
                        case 'Insurance':
                            addonCost = days * 800;
                            break;
                    }
                }

                const totalCost = baseTotal + addonCost;

                // Show confirmation with detailed breakdown
                const confirmationMessage = `üöó BOOKING CONFIRMATION üöó

Car: Mitsubishi 3000GT
Pickup Date: ${pickupDate}
Return Date: ${returnDate}
Location: ${pickupLocation}
Duration: ${days} day${days > 1 ? 's' : ''}
Add-ons: ${addonText}

üí∞ COST BREAKDOWN:
Base Rental: ‚Ç±${baseTotal.toLocaleString()} (‚Ç±15,000/day √ó ${days} day${days > 1 ? 's' : ''})
Add-on Cost: ‚Ç±${addonCost.toLocaleString()}
Subtotal: ‚Ç±${totalCost.toLocaleString()}
Security Deposit: ‚Ç±20,000 (refundable)

TOTAL PAYABLE: ‚Ç±${(totalCost + 20000).toLocaleString()}

üìû We'll contact you at the provided number to confirm your booking!

Thank you for choosing our service! üôè`;

                alert(confirmationMessage);
                
                // Close modal and reset form
                modal.style.display = 'none';
                document.body.style.overflow = 'auto';
                form.reset();
                
            } catch (error) {
                console.error('Booking error:', error);
                alert('Something went wrong. Please try again.');
            }
        });

        // Set minimum date to today for both date inputs
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('pickupDate').min = today;
        document.getElementById('returnDate').min = today;

        // Update return date minimum when pickup date changes
        document.getElementById('pickupDate').addEventListener('change', function() {
            const pickupDate = new Date(this.value);
            pickupDate.setDate(pickupDate.getDate() + 1);
            document.getElementById('returnDate').min = pickupDate.toISOString().split('T')[0];
            
            // Clear return date if it's before the new pickup date
            const returnDateInput = document.getElementById('returnDate');
            if (returnDateInput.value && new Date(returnDateInput.value) <= new Date(this.value)) {
                returnDateInput.value = '';
            }
        });

        // Add loading state to the rent button
        rentBtn.addEventListener('mousedown', function() {
            this.style.transform = 'scale(0.98)';
        });

        rentBtn.addEventListener('mouseup', function() {
            this.style.transform = 'scale(1)';
        });
        
        



        </script>
</body>
</html>